import { useRouter } from 'expo-router';
import React, { useState } from 'react';
import { Alert, StyleSheet, Switch, Text, TextInput, TouchableOpacity, View } from 'react-native';
import supabase from '../utils/supabaseClient'; // Ensure this path is correct

const CreateTenantScreen = () => {
  const router = useRouter();
  const [tenantName, setTenantName] = useState('');
  const [isPrivateTenant, setIsPrivateTenant] = useState(false); // Consider if this is still needed client-side, if join_code is generated by RPC
  const [coordinatorEmail, setCoordinatorEmail] = useState('');
  const [coordinatorPassword, setCoordinatorPassword] = useState('');
  const [coordinatorFirstName, setCoordinatorFirstName] = useState('');
  const [coordinatorLastName, setCoordinatorLastName] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleCreateTenantAndUser = async () => {
    if (!tenantName || !coordinatorEmail || !coordinatorPassword || !coordinatorFirstName || !coordinatorLastName) {
      Alert.alert('Validation Error', 'Please fill in all required fields (Tenant Name, Email, Password, First Name, Last Name).');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      // 1. Sign up the user with Supabase Auth
      // The auth service needs to know the email and password first.
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: coordinatorEmail,
        password: coordinatorPassword,
        // No need for options.data here; public.users is handled by RPC
      });

      if (authError) {
        setError(authError.message);
        setLoading(false);
        return;
      }

      // Check if user is returned after signup
      const user = authData?.user;
      if (!user) {
        setError('User not returned after signup. Authentication might be pending.');
        setLoading(false);
        return;
      }

      // 2. Call the RPC function to create the tenant and link the user profile
      // Pass the user's email from the auth data, as it's definitive.
      const { data: newTenantId, error: rpcError } = await supabase.rpc('create_new_tenant_and_user_profile', {
        tenant_name: tenantName,
        user_email: user.email!, // Use the authenticated user's email
        user_first_name: coordinatorFirstName,
        user_last_name: coordinatorLastName,
        user_role: 'coordinator', // This user is explicitly the first coordinator
      });

      if (rpcError) {
        console.error('Error creating tenant and user profile via RPC:', rpcError);
        setError(`Failed to set up account: ${rpcError.message}`);
        // If RPC fails, try to sign out the user and clean up auth entry if possible (requires admin key usually)
        await supabase.auth.signOut();
        // Consider having a server-side cleanup function if RPC fails to delete the tenant/user
        // as client-side deletion might face RLS issues too.
        setLoading(false);
        return;
      }

      if (!newTenantId) {
        setError('Tenant ID was not returned by the backend function.');
        setLoading(false);
        return;
      }

      console.log('Tenant and Coordinator profile created successfully! New Tenant ID:', newTenantId);
      Alert.alert('Success', 'Tenant and Coordinator account created successfully!');

      // After successful creation, navigate to AdminDashboard.
      // The user is already logged in at this point from supabase.auth.signUp.
      router.replace('/AdminDashboard');

    } catch (err: any) {
      setError(err.message || 'An unexpected error occurred during account creation.');
      console.error('Unhandled error during account creation:', err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Create New Tenant & Coordinator Account</Text>

      {error && <Text style={styles.error}>{error}</Text>}

      <View style={styles.inputContainer}>
        <Text style={styles.label}>Tenant Name:</Text>
        <TextInput style={styles.input} value={tenantName} onChangeText={setTenantName} placeholder="Tenant Name" />
      </View>

      {/* isPrivateTenant is now a property of the tenant table. */}
      {/* If you want to use it, you'd need to modify the RPC function to accept it. */}
      {/* For now, it's not being passed to the RPC function which only takes 'name'. */}
      {/* If your `public.tenants` table has `is_private` and `join_code` columns, */}
      {/* ensure the RPC function is updated to accept and insert values for them. */}
      {/* Example: Add `is_private boolean` and `join_code text` to RPC parameters and INSERT statement. */}
      {/* For now, keeping your original UI toggle, but it won't affect DB unless RPC is updated. */}
      <View style={styles.toggleContainer}>
        <Text style={styles.label}>Private Tenant?</Text>
        <Switch value={isPrivateTenant} onValueChange={setIsPrivateTenant} />
      </View>

      <View style={styles.inputContainer}>
        <Text style={styles.label}>Your Email:</Text>
        <TextInput style={styles.input} value={coordinatorEmail} onChangeText={setCoordinatorEmail} placeholder="Email" keyboardType="email-address" autoCapitalize="none" />
      </View>

      <View style={styles.inputContainer}>
        <Text style={styles.label}>Your Password:</Text>
        <TextInput style={styles.input} value={coordinatorPassword} onChangeText={setCoordinatorPassword} placeholder="Password" secureTextEntry={true} />
      </View>

      <View style={styles.inputContainer}>
        <Text style={styles.label}>Your First Name:</Text>
        <TextInput style={styles.input} value={coordinatorFirstName} onChangeText={setCoordinatorFirstName} placeholder="First Name" />
      </View>

      <View style={styles.inputContainer}>
        <Text style={styles.label}>Your Last Name:</Text>
        <TextInput style={styles.input} value={coordinatorLastName} onChangeText={setCoordinatorLastName} placeholder="Last Name" />
      </View>

      <TouchableOpacity style={styles.createButton} onPress={handleCreateTenantAndUser} disabled={loading}>
        <Text style={styles.buttonText}>{loading ? 'Creating Account...' : 'Create Tenant & Sign Up'}</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#F5F5F5',
  },
  title: {
    fontSize: 22,
    fontWeight: 'bold',
    marginBottom: 30,
    color: '#333',
    textAlign: 'center',
  },
  inputContainer: {
    marginBottom: 20,
    width: '100%',
  },
  label: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 5,
    color: '#333',
  },
  input: {
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    borderRadius: 5,
    paddingHorizontal: 10,
    backgroundColor: '#FFFFFF',
  },
  createButton: {
    backgroundColor: '#1E3A8A', // Navy blue
    paddingVertical: 15,
    borderRadius: 5,
    alignItems: 'center',
  },
  buttonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: 'bold',
  },
  error: {
    color: 'red',
    marginTop: 10,
    textAlign: 'center',
  },
  toggleContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 20,
  },
});

export default CreateTenantScreen;